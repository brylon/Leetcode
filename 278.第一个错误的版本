你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。

假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。

你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。

示例:

给定 n = 5，并且 version = 4 是第一个错误的版本。

调用 isBadVersion(3) -> false
调用 isBadVersion(5) -> true
调用 isBadVersion(4) -> true

所以，4 是第一个错误的版本。 

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/first-bad-version
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
### 解题思路
直接暴力解法，普通二分查找，中间遇到两个问题，第一个就是时间超限，太马虎了，在else的判断中，可能有只有两个版本的情况，即lo=1,hi=2一直没办法改变，跳不出循环，导致的时间超限;然后就是内存越界，测试用例中可能最大数等于int类型的边界值，lo=mid,再跟hi相加肯定就越界了，所以暴力开一个大的内存，直接定义为long,最后得到结果再强转成int类型再返回

### 代码

```c
// The API isBadVersion is defined for you.
// bool isBadVersion(int version);

int firstBadVersion(int n) {
    long lo=1,hi=n;
    long mid;
    while(lo<hi){
        mid=(lo+hi)/2;
        if(isBadVersion(mid)){
            hi=mid;
        }
        else{
            lo=mid+1;
        }
    }
    return (int)hi;
}
```
