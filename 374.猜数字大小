猜数字游戏的规则如下：

每轮游戏，我都会从 1 到 n 随机选择一个数字。 请你猜选出的是哪个数字。
如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。
你可以通过调用一个预先定义好的接口 int guess(int num) 来获取猜测结果，返回值一共有 3 种可能的情况（-1，1 或 0）：

-1：我选出的数字比你猜的数字小 pick < num
1：我选出的数字比你猜的数字大 pick > num
0：我选出的数字和你猜的数字一样。恭喜！你猜对了！pick == num
返回我选出的数字。

 

示例 1：

输入：n = 10, pick = 6
输出：6
示例 2：

输入：n = 1, pick = 1
输出：1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/guess-number-higher-or-lower
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

### 解题思路
还是越界问题，要是坚守着之前开long型，明显有点蠢了，还是要学的，把mid设为left+(right-left)/2,这样就不会出现越界问题，把这个式子化简一下，其实是一样的，不过这样巧妙的避开了越界问题：（left+right）/2==left+(right-left)/2,前辈们的精华，被我白嫖到了，哈哈哈哈哈哈，这样也不用开long类型占更多内存了，之前真傻

### 代码

```c
/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return 	     -1 if num is lower than the guess number
 *			      1 if num is higher than the guess number
 *               otherwise return 0
 * int guess(int num);
 */

int guessNumber(int n){
    int  left=1,right=n;
    
    while(left<=right){
        int mid=left+(right-left)/2;
        if(guess(mid)==-1)
           right=mid-1;
        else if(guess(mid)==0)
            return mid;
        else 
            left=mid+1;
    }
	return -1;
}
```
